@use "sass:map";
@use "sass:math";
@use "sass:string";

@use '../tokens/primitives' as primitives;
@use './__string-helpers' as string-helper;

// $storybook: true !default;
$storybook: false !default;

$base-grid: primitives.$base-grid;

/// Retrieves the font size for a given typography variant, size, and device.
/// Ensures it exists before calculation.
///
/// @param {String} $variant - The typography variant (e.g., 'heading', 'body').
/// @param {String} [$device='desktop'] - The device type ('desktop' or 'mobile').
/// @param {String} [$size='medium'] - The size for the variant (e.g., 'large', 'medium', 'small').
/// @return {Number|null} - The calculated font size in pixels, or null if not found.
@function get-font-size($variant, $device: 'desktop', $size: 'medium') {
  $variant-map: map.get(primitives.$typography-variants-list, $variant);
  $device-map: if($variant-map, map.get($variant-map, $device), null);
  $font-size: if($device-map, map.get($device-map, $size), null);

  @return if($font-size, $font-size * primitives.$base-font-size, null);
}

/// Ensures the font size meets the minimum threshold of 14px.
///
/// @param {Number} $value - The calculated font size in pixels.
/// @return {Number} - The original font size if it's 14px or greater, otherwise returns 14px.
///
/// This function checks the given font size and ensures that it is not smaller than 14px.
/// If the provided font size is less than 14px, it returns 14px instead. This is useful for
/// preventing text from becoming too small to read comfortably.

@function ensure-minimum-font-size($value) {
  @if($value < 14) {
    @return 14px;
  }

  @return $value;
}

/// Calculates the line height for a given typography variant and size,
/// ensuring it is divisible by the base grid size.
///
/// @param {String} $variant - The typography variant (e.g., 'heading', 'body').
/// @param {String} [$size='default'] - The size for the variant (e.g., 'large', 'medium', 'small').
/// @return {Number|null} - The calculated line height in pixels, or null if the variant or size is not found.
///
@function get-line-height($variant, $size: 'default') {
  $font-size: get-font-size($variant, $size);

  @if $font-size == null {
    @return null;
  }

  $line-height: math.floor($font-size * 1);

  @return if(
    $line-height % $base-grid == 0,
    $line-height,
    $line-height + $base-grid - ($line-height % $base-grid)
  );
}

/// Sets the font-face for a given weight.
///
/// @param {String} $weight - The font weight.
@mixin set-font-face($weight) {
  $w: string-helper.to-pascal-case($weight);

  font-family: primitives.$heading-font-family;
  font-style: normal;
  font-weight: map.get(primitives.$typography-weight-map, $weight);
  font-display: swap;
  @if $storybook {
    src: url('/static/media/dist-custom-elements/fonts/Poppins-#{$w}.woff2') format("woff2");
  } @else {
    src: url('/fonts/Poppins-#{$w}.woff2') format("woff2");
  }
  // src: url('/fonts/Poppins-#{$w}.woff2') format("woff2"); // Assim funciona apenas no stencil, nao no sb
}

/// Generates font-face definitions for each weight.
@each $weight, $specs in primitives.$typography-weight-map {
  @font-face {
    @include set-font-face($weight);
  }
}

/// Sets the typography properties dynamically.
///
/// @param {String} $variant - The typography variant.
/// @param {String} $size - The size.
/// @param {String} $device - The device type.
/// @param {Color} [$color=#000] - The default text color.
/// @param {Number} [$margin=0] - The default margin.
@mixin set-font-properties($variant, $size: 'default', $color: #000, $margin: 0) {
  font-size: get-font-size($variant, $size);
  line-height: get-line-height($variant, $size);
  font-weight: map.get(map.get(primitives.$typography-variants-list, $variant), 'weight');
  color: map.get(map.get(primitives.$typography-variants-list, $variant), 'color') or $color;
  margin: map.get(map.get(primitives.$typography-variants-list, $variant), 'margin') or $margin;
}

@mixin set-typography() {
  @each $variant, $settings in primitives.$typography-variants-list {
    @each $device, $config in $settings {
      @if $device == 'desktop' or $device == 'mobile' {
        @each $size-key, $size-value in $config {
          $selector: "*.#{$variant}-#{$size-key}";
          $media: if($device == 'mobile', "(max-width: 991px)", null);

          @if $media {
            @media screen and #{$media} {
              #{$selector} {
                @include set-font-properties($variant, $size-key, $device);
              }
            }
          } @else {
            #{$selector} {
              @include set-font-properties($variant, $size-key, 'desktop');
            }
          }
        }
      }
    }
  }
}