import type { Meta, StoryFn } from '@storybook/html';

import { IconLargeProps, iconLargeSizes, type IconProps } from './icon.types';
import { ICON_LARGE_OPTIONS } from './icon.utils';

type HTMLString = string;

const meta: Meta<IconProps> = {
  title: 'Assets/Icon/IconLarge',
  component: 'mnt-icon-large',
  argTypes: {
    icon: { control: 'select', options: ICON_LARGE_OPTIONS },
    size: { control: 'select', options: Object.keys(iconLargeSizes) },
    color: { control: 'color' },
  },
  parameters: {
    docs: {
      description: {
        component:
          '**Icon Large** √© um componente especializado para √≠cones de maior complexidade visual, distinto do componente `Icon` padr√£o.\n\n' +
          '### üéØ **Caracter√≠sticas principais:**\n' +
          '- **Ilustra√ß√µes mais complexas:** Cont√™m mais detalhes visuais que os √≠cones convencionais\n' +
          '- **Monocrom√°ticos:** Utilizam apenas uma cor, diferentemente do componente `Illustration` que √© colorido\n' +
          '- **Tamanhos maiores recomendados:** Devido √† complexidade, n√£o s√£o indicados para tamanhos muito pequenos\n' +
          '- **Uso espec√≠fico:** Ideais para destaques, se√ß√µes principais ou quando precisar de mais impacto visual\n\n' +
          '### ‚ö†Ô∏è **Diferen√ßas do componente Icon:**\n' +
          '- `Icon`: S√≠mbolos simples, funcionam bem em qualquer tamanho\n' +
          '- `IconLarge`: Ilustra√ß√µes detalhadas, melhores em tamanhos m√©dios/grandes\n\n' +
          '### üìè **Recomenda√ß√µes de uso:**\n' +
          '- **Tamanho m√≠nimo recomendado:** `medium` (24px)\n' +
          '- **Ideal para:** Headers, cards principais, estados vazios, onboarding\n' +
          '- **Evitar em:** Bot√µes pequenos, listas densas, elementos inline\n\n' +
          '**Aten√ß√£o:** Os nomes dos √≠cones devem corresponder exatamente √†s nomenclaturas do prot√≥tipo Figma.\n\n' +
          'Para visualizar todos os √≠cones dispon√≠veis, veja a [listagem completa](#icon-large-variants).\n\n' +
          '**Figma:** [Global Assets | IconLarge](https://www.figma.com/design/0Yxvp7aJaKkjyXduoQlPpM/-4-Global-Assets?node-id=1264-68&t=nRkYtrOHJjfZr11g-4)\n\n',
      },
    },
  },
};

export default meta;

const DefaultTemplate = (args: IconLargeProps) => `
<mnt-icon-large
  icon="${args.icon}"
  size="${args.size}"
  color="${args.color}"
</mnt-icon-large>
`;

export const Default: StoryFn = DefaultTemplate.bind({});
Default.args = {
  icon: 'placeholder',
  size: 'medium',
  color: 'black',
} as IconLargeProps;
Default.storyName = 'Playground';
Default.parameters = {
  id: 'icon-large-playground',
  docs: {
    description: {
      story: 'Playground do componente `<mnt-icon-large>`.',
    },
  },
};

const renderIconBox = (iconName: string): HTMLString => {
  return `
    <div class="sb-box">
      <mnt-icon-large icon="${iconName}" size="medium"></mnt-icon-large>
      <p class="label-regular-tiny">${iconName}</p>
    </div>
  `;
};

const renderAllIcons = (): HTMLString => {
  let html = '';
  ICON_LARGE_OPTIONS.forEach((icon) => {
    html += `${renderIconBox(icon)}`;
  });

  return `
    <div class="sb-grid-6 sb-grid-stretch">
      ${html}
    </div>
  `;
};

export const IconLargeVariants: StoryFn = () => renderAllIcons();
IconLargeVariants.storyName = 'Icon Large Variants';
IconLargeVariants.parameters = {
  id: 'icon-large-variants',
  docs: {
    description: {
      story: 'Listagem completa de todos os √≠cones "grandes" dispon√≠veis no sistema.',
    },
  },
  controls: { disable: true },
};
