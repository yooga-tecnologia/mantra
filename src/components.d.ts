/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonProps } from "./components/button/button.types";
import { IconProps } from "./components/icon/icon.types";
import { IllustrationProps } from "./components/yoo-illustration/yoo-illustration.types";
import { TooltipProps } from "./components/yoo-tooltip/yoo-tooltip.types";
export { ButtonProps } from "./components/button/button.types";
export { IconProps } from "./components/icon/icon.types";
export { IllustrationProps } from "./components/yoo-illustration/yoo-illustration.types";
export { TooltipProps } from "./components/yoo-tooltip/yoo-tooltip.types";
export namespace Components {
    interface MntButton {
        "color": ButtonProps['color'];
        "disabled": ButtonProps['disabled'];
        "fullWidth": ButtonProps['fullWidth'];
        "iconAnimation"?: ButtonProps['iconAnimation'];
        "iconLeft"?: ButtonProps['iconLeft'];
        "iconRight"?: ButtonProps['iconRight'];
        "label"?: ButtonProps['label'];
        "size": ButtonProps['size'];
        "variant": ButtonProps['variant'];
    }
    interface MntIcon {
        "animation"?: IconProps['animation'];
        "background"?: IconProps['background'];
        "color": IconProps['color'];
        "icon": IconProps['icon'];
        "size": IconProps['size'];
    }
    interface YooIllustration {
        "height": IllustrationProps['height'];
        "name": IllustrationProps['name'];
        "width": IllustrationProps['width'];
    }
    interface YooInputGroup {
        "condition": boolean;
        "inputName": string;
        "isRequired": boolean;
        "label": string;
        "placeholder"?: string;
        "trailingIcon": boolean;
    }
    interface YooTooltip {
        "position": TooltipProps['position'];
        "text": TooltipProps['text'];
    }
}
export interface MntButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMntButtonElement;
}
declare global {
    interface HTMLMntButtonElementEventMap {
        "buttonClick": MouseEvent;
    }
    interface HTMLMntButtonElement extends Components.MntButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMntButtonElementEventMap>(type: K, listener: (this: HTMLMntButtonElement, ev: MntButtonCustomEvent<HTMLMntButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMntButtonElementEventMap>(type: K, listener: (this: HTMLMntButtonElement, ev: MntButtonCustomEvent<HTMLMntButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMntButtonElement: {
        prototype: HTMLMntButtonElement;
        new (): HTMLMntButtonElement;
    };
    interface HTMLMntIconElement extends Components.MntIcon, HTMLStencilElement {
    }
    var HTMLMntIconElement: {
        prototype: HTMLMntIconElement;
        new (): HTMLMntIconElement;
    };
    interface HTMLYooIllustrationElement extends Components.YooIllustration, HTMLStencilElement {
    }
    var HTMLYooIllustrationElement: {
        prototype: HTMLYooIllustrationElement;
        new (): HTMLYooIllustrationElement;
    };
    interface HTMLYooInputGroupElement extends Components.YooInputGroup, HTMLStencilElement {
    }
    var HTMLYooInputGroupElement: {
        prototype: HTMLYooInputGroupElement;
        new (): HTMLYooInputGroupElement;
    };
    interface HTMLYooTooltipElement extends Components.YooTooltip, HTMLStencilElement {
    }
    var HTMLYooTooltipElement: {
        prototype: HTMLYooTooltipElement;
        new (): HTMLYooTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "mnt-button": HTMLMntButtonElement;
        "mnt-icon": HTMLMntIconElement;
        "yoo-illustration": HTMLYooIllustrationElement;
        "yoo-input-group": HTMLYooInputGroupElement;
        "yoo-tooltip": HTMLYooTooltipElement;
    }
}
declare namespace LocalJSX {
    interface MntButton {
        "color"?: ButtonProps['color'];
        "disabled"?: ButtonProps['disabled'];
        "fullWidth"?: ButtonProps['fullWidth'];
        "iconAnimation"?: ButtonProps['iconAnimation'];
        "iconLeft"?: ButtonProps['iconLeft'];
        "iconRight"?: ButtonProps['iconRight'];
        "label"?: ButtonProps['label'];
        "onButtonClick"?: (event: MntButtonCustomEvent<MouseEvent>) => void;
        "size"?: ButtonProps['size'];
        "variant"?: ButtonProps['variant'];
    }
    interface MntIcon {
        "animation"?: IconProps['animation'];
        "background"?: IconProps['background'];
        "color"?: IconProps['color'];
        "icon": IconProps['icon'];
        "size"?: IconProps['size'];
    }
    interface YooIllustration {
        "height"?: IllustrationProps['height'];
        "name": IllustrationProps['name'];
        "width"?: IllustrationProps['width'];
    }
    interface YooInputGroup {
        "condition"?: boolean;
        "inputName"?: string;
        "isRequired"?: boolean;
        "label"?: string;
        "placeholder"?: string;
        "trailingIcon"?: boolean;
    }
    interface YooTooltip {
        "position"?: TooltipProps['position'];
        "text"?: TooltipProps['text'];
    }
    interface IntrinsicElements {
        "mnt-button": MntButton;
        "mnt-icon": MntIcon;
        "yoo-illustration": YooIllustration;
        "yoo-input-group": YooInputGroup;
        "yoo-tooltip": YooTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mnt-button": LocalJSX.MntButton & JSXBase.HTMLAttributes<HTMLMntButtonElement>;
            "mnt-icon": LocalJSX.MntIcon & JSXBase.HTMLAttributes<HTMLMntIconElement>;
            "yoo-illustration": LocalJSX.YooIllustration & JSXBase.HTMLAttributes<HTMLYooIllustrationElement>;
            "yoo-input-group": LocalJSX.YooInputGroup & JSXBase.HTMLAttributes<HTMLYooInputGroupElement>;
            "yoo-tooltip": LocalJSX.YooTooltip & JSXBase.HTMLAttributes<HTMLYooTooltipElement>;
        }
    }
}
