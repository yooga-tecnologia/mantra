/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonIconProps, ButtonProps } from "./components/button/button.types";
import { IconProps } from "./components/icon/icon.types";
import { IllustrationProps } from "./components/illustration/illustration.types";
import { TooltipProps } from "./components/tooltip/tooltip.types";
export { ButtonIconProps, ButtonProps } from "./components/button/button.types";
export { IconProps } from "./components/icon/icon.types";
export { IllustrationProps } from "./components/illustration/illustration.types";
export { TooltipProps } from "./components/tooltip/tooltip.types";
export namespace Components {
    interface MntButton {
        "color": ButtonProps['color'];
        "disabled": ButtonProps['disabled'];
        "fullWidth": ButtonProps['fullWidth'];
        "iconAnimation"?: ButtonProps['iconAnimation'];
        "iconLeft"?: ButtonProps['iconLeft'];
        "iconRight"?: ButtonProps['iconRight'];
        "label"?: ButtonProps['label'];
        "size": ButtonProps['size'];
        "variant": ButtonProps['variant'];
    }
    interface MntButtonIcon {
        "color": ButtonIconProps['color'];
        "disabled": ButtonIconProps['disabled'];
        "icon"?: ButtonIconProps['icon'];
        "size": ButtonIconProps['size'];
        "variant": ButtonIconProps['variant'];
    }
    interface MntIcon {
        "animation"?: IconProps['animation'];
        "background"?: IconProps['background'];
        "color": IconProps['color'];
        "icon": IconProps['icon'];
        "size": IconProps['size'];
    }
    interface MntIllustration {
        "height": IllustrationProps['height'];
        "name": IllustrationProps['name'];
        "width": IllustrationProps['width'];
    }
    interface MntInputGroup {
        "condition": boolean;
        "inputName": string;
        "isRequired": boolean;
        "label": string;
        "placeholder"?: string;
        "trailingIcon": boolean;
    }
    interface MntTooltip {
        "position": TooltipProps['position'];
        "text": TooltipProps['text'];
    }
}
export interface MntButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMntButtonElement;
}
export interface MntButtonIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMntButtonIconElement;
}
declare global {
    interface HTMLMntButtonElementEventMap {
        "buttonClick": MouseEvent;
    }
    interface HTMLMntButtonElement extends Components.MntButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMntButtonElementEventMap>(type: K, listener: (this: HTMLMntButtonElement, ev: MntButtonCustomEvent<HTMLMntButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMntButtonElementEventMap>(type: K, listener: (this: HTMLMntButtonElement, ev: MntButtonCustomEvent<HTMLMntButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMntButtonElement: {
        prototype: HTMLMntButtonElement;
        new (): HTMLMntButtonElement;
    };
    interface HTMLMntButtonIconElementEventMap {
        "buttonClick": MouseEvent;
    }
    interface HTMLMntButtonIconElement extends Components.MntButtonIcon, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMntButtonIconElementEventMap>(type: K, listener: (this: HTMLMntButtonIconElement, ev: MntButtonIconCustomEvent<HTMLMntButtonIconElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMntButtonIconElementEventMap>(type: K, listener: (this: HTMLMntButtonIconElement, ev: MntButtonIconCustomEvent<HTMLMntButtonIconElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMntButtonIconElement: {
        prototype: HTMLMntButtonIconElement;
        new (): HTMLMntButtonIconElement;
    };
    interface HTMLMntIconElement extends Components.MntIcon, HTMLStencilElement {
    }
    var HTMLMntIconElement: {
        prototype: HTMLMntIconElement;
        new (): HTMLMntIconElement;
    };
    interface HTMLMntIllustrationElement extends Components.MntIllustration, HTMLStencilElement {
    }
    var HTMLMntIllustrationElement: {
        prototype: HTMLMntIllustrationElement;
        new (): HTMLMntIllustrationElement;
    };
    interface HTMLMntInputGroupElement extends Components.MntInputGroup, HTMLStencilElement {
    }
    var HTMLMntInputGroupElement: {
        prototype: HTMLMntInputGroupElement;
        new (): HTMLMntInputGroupElement;
    };
    interface HTMLMntTooltipElement extends Components.MntTooltip, HTMLStencilElement {
    }
    var HTMLMntTooltipElement: {
        prototype: HTMLMntTooltipElement;
        new (): HTMLMntTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "mnt-button": HTMLMntButtonElement;
        "mnt-button-icon": HTMLMntButtonIconElement;
        "mnt-icon": HTMLMntIconElement;
        "mnt-illustration": HTMLMntIllustrationElement;
        "mnt-input-group": HTMLMntInputGroupElement;
        "mnt-tooltip": HTMLMntTooltipElement;
    }
}
declare namespace LocalJSX {
    interface MntButton {
        "color"?: ButtonProps['color'];
        "disabled"?: ButtonProps['disabled'];
        "fullWidth"?: ButtonProps['fullWidth'];
        "iconAnimation"?: ButtonProps['iconAnimation'];
        "iconLeft"?: ButtonProps['iconLeft'];
        "iconRight"?: ButtonProps['iconRight'];
        "label"?: ButtonProps['label'];
        "onButtonClick"?: (event: MntButtonCustomEvent<MouseEvent>) => void;
        "size"?: ButtonProps['size'];
        "variant"?: ButtonProps['variant'];
    }
    interface MntButtonIcon {
        "color"?: ButtonIconProps['color'];
        "disabled"?: ButtonIconProps['disabled'];
        "icon"?: ButtonIconProps['icon'];
        "onButtonClick"?: (event: MntButtonIconCustomEvent<MouseEvent>) => void;
        "size"?: ButtonIconProps['size'];
        "variant"?: ButtonIconProps['variant'];
    }
    interface MntIcon {
        "animation"?: IconProps['animation'];
        "background"?: IconProps['background'];
        "color"?: IconProps['color'];
        "icon": IconProps['icon'];
        "size"?: IconProps['size'];
    }
    interface MntIllustration {
        "height"?: IllustrationProps['height'];
        "name": IllustrationProps['name'];
        "width"?: IllustrationProps['width'];
    }
    interface MntInputGroup {
        "condition"?: boolean;
        "inputName"?: string;
        "isRequired"?: boolean;
        "label"?: string;
        "placeholder"?: string;
        "trailingIcon"?: boolean;
    }
    interface MntTooltip {
        "position"?: TooltipProps['position'];
        "text"?: TooltipProps['text'];
    }
    interface IntrinsicElements {
        "mnt-button": MntButton;
        "mnt-button-icon": MntButtonIcon;
        "mnt-icon": MntIcon;
        "mnt-illustration": MntIllustration;
        "mnt-input-group": MntInputGroup;
        "mnt-tooltip": MntTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mnt-button": LocalJSX.MntButton & JSXBase.HTMLAttributes<HTMLMntButtonElement>;
            "mnt-button-icon": LocalJSX.MntButtonIcon & JSXBase.HTMLAttributes<HTMLMntButtonIconElement>;
            "mnt-icon": LocalJSX.MntIcon & JSXBase.HTMLAttributes<HTMLMntIconElement>;
            "mnt-illustration": LocalJSX.MntIllustration & JSXBase.HTMLAttributes<HTMLMntIllustrationElement>;
            "mnt-input-group": LocalJSX.MntInputGroup & JSXBase.HTMLAttributes<HTMLMntInputGroupElement>;
            "mnt-tooltip": LocalJSX.MntTooltip & JSXBase.HTMLAttributes<HTMLMntTooltipElement>;
        }
    }
}
